{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "# Lab-1: Data Manipulation and Exploration.\n",
    "_____\n",
    "##### In this lab, you will manipulate a dataset and prepare it for training and testing.\n",
    "\n",
    "### Objectives:\n",
    "1. Data exploration\n",
    "2. One-hot-encoding of categorical features\n",
    "3. Data imputation\n",
    "4. Features Scaling\n",
    "5. Trainset splitting\n",
    "6. Data plotting\n",
    "-----\n",
    "### Loading Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "data = pd.read_csv('./data/train.csv')\n",
    "x_test_private = pd.read_csv('./data/test.csv')\n",
    "x_train = data.loc[:, :'Gender Inequality Index (GII)']\n",
    "y_train = data['y']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data exploration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>galactic year</th>\n",
       "      <th>galaxy</th>\n",
       "      <th>existence expectancy index</th>\n",
       "      <th>existence expectancy at birth</th>\n",
       "      <th>Gross income per capita</th>\n",
       "      <th>Income Index</th>\n",
       "      <th>Expected years of education (galactic years)</th>\n",
       "      <th>Mean years of education (galactic years)</th>\n",
       "      <th>Intergalactic Development Index (IDI)</th>\n",
       "      <th>Education Index</th>\n",
       "      <th>...</th>\n",
       "      <th>Intergalactic Development Index (IDI), female</th>\n",
       "      <th>Intergalactic Development Index (IDI), male</th>\n",
       "      <th>Gender Development Index (GDI)</th>\n",
       "      <th>Intergalactic Development Index (IDI), female, Rank</th>\n",
       "      <th>Intergalactic Development Index (IDI), male, Rank</th>\n",
       "      <th>Adjusted net savings</th>\n",
       "      <th>Creature Immunodeficiency Disease prevalence, adult (% ages 15-49), total</th>\n",
       "      <th>Private galaxy capital flows (% of GGP)</th>\n",
       "      <th>Gender Inequality Index (GII)</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>990025</td>\n",
       "      <td>Large Magellanic Cloud (LMC)</td>\n",
       "      <td>0.628657</td>\n",
       "      <td>63.125200</td>\n",
       "      <td>27109.234310</td>\n",
       "      <td>0.646039</td>\n",
       "      <td>8.240543</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.052590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>990025</td>\n",
       "      <td>Camelopardalis B</td>\n",
       "      <td>0.818082</td>\n",
       "      <td>81.004994</td>\n",
       "      <td>30166.793958</td>\n",
       "      <td>0.852246</td>\n",
       "      <td>10.671823</td>\n",
       "      <td>4.742470</td>\n",
       "      <td>0.833624</td>\n",
       "      <td>0.467873</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19.177926</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22.785018</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.059868</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>990025</td>\n",
       "      <td>Virgo I</td>\n",
       "      <td>0.659443</td>\n",
       "      <td>59.570534</td>\n",
       "      <td>8441.707353</td>\n",
       "      <td>0.499762</td>\n",
       "      <td>8.840316</td>\n",
       "      <td>5.583973</td>\n",
       "      <td>0.469110</td>\n",
       "      <td>0.363837</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.151265</td>\n",
       "      <td>6.534020</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.050449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>990025</td>\n",
       "      <td>UGC 8651 (DDO 181)</td>\n",
       "      <td>0.555862</td>\n",
       "      <td>52.333293</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.912194</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.049394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>990025</td>\n",
       "      <td>Tucana Dwarf</td>\n",
       "      <td>0.991196</td>\n",
       "      <td>81.802464</td>\n",
       "      <td>81033.956906</td>\n",
       "      <td>1.131163</td>\n",
       "      <td>13.800672</td>\n",
       "      <td>13.188907</td>\n",
       "      <td>0.910341</td>\n",
       "      <td>0.918353</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.611753</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.154247</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 80 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   galactic year                        galaxy  existence expectancy index  \\\n",
       "0         990025  Large Magellanic Cloud (LMC)                    0.628657   \n",
       "1         990025              Camelopardalis B                    0.818082   \n",
       "2         990025                       Virgo I                    0.659443   \n",
       "3         990025            UGC 8651 (DDO 181)                    0.555862   \n",
       "4         990025                  Tucana Dwarf                    0.991196   \n",
       "\n",
       "   existence expectancy at birth  Gross income per capita  Income Index  \\\n",
       "0                      63.125200             27109.234310      0.646039   \n",
       "1                      81.004994             30166.793958      0.852246   \n",
       "2                      59.570534              8441.707353      0.499762   \n",
       "3                      52.333293                      NaN           NaN   \n",
       "4                      81.802464             81033.956906      1.131163   \n",
       "\n",
       "   Expected years of education (galactic years)  \\\n",
       "0                                      8.240543   \n",
       "1                                     10.671823   \n",
       "2                                      8.840316   \n",
       "3                                           NaN   \n",
       "4                                     13.800672   \n",
       "\n",
       "   Mean years of education (galactic years)  \\\n",
       "0                                       NaN   \n",
       "1                                  4.742470   \n",
       "2                                  5.583973   \n",
       "3                                       NaN   \n",
       "4                                 13.188907   \n",
       "\n",
       "   Intergalactic Development Index (IDI)  Education Index  ...  \\\n",
       "0                                    NaN              NaN  ...   \n",
       "1                               0.833624         0.467873  ...   \n",
       "2                               0.469110         0.363837  ...   \n",
       "3                                    NaN              NaN  ...   \n",
       "4                               0.910341         0.918353  ...   \n",
       "\n",
       "   Intergalactic Development Index (IDI), female  \\\n",
       "0                                            NaN   \n",
       "1                                            NaN   \n",
       "2                                            NaN   \n",
       "3                                            NaN   \n",
       "4                                            NaN   \n",
       "\n",
       "   Intergalactic Development Index (IDI), male  \\\n",
       "0                                          NaN   \n",
       "1                                          NaN   \n",
       "2                                          NaN   \n",
       "3                                          NaN   \n",
       "4                                          NaN   \n",
       "\n",
       "   Gender Development Index (GDI)  \\\n",
       "0                             NaN   \n",
       "1                             NaN   \n",
       "2                             NaN   \n",
       "3                             NaN   \n",
       "4                             NaN   \n",
       "\n",
       "   Intergalactic Development Index (IDI), female, Rank  \\\n",
       "0                                                NaN     \n",
       "1                                                NaN     \n",
       "2                                                NaN     \n",
       "3                                                NaN     \n",
       "4                                                NaN     \n",
       "\n",
       "   Intergalactic Development Index (IDI), male, Rank  Adjusted net savings   \\\n",
       "0                                                NaN                    NaN   \n",
       "1                                                NaN              19.177926   \n",
       "2                                                NaN              21.151265   \n",
       "3                                                NaN                    NaN   \n",
       "4                                                NaN                    NaN   \n",
       "\n",
       "   Creature Immunodeficiency Disease prevalence, adult (% ages 15-49), total  \\\n",
       "0                                                NaN                           \n",
       "1                                                NaN                           \n",
       "2                                           6.534020                           \n",
       "3                                           5.912194                           \n",
       "4                                           5.611753                           \n",
       "\n",
       "   Private galaxy capital flows (% of GGP)  Gender Inequality Index (GII)  \\\n",
       "0                                      NaN                            NaN   \n",
       "1                                22.785018                            NaN   \n",
       "2                                      NaN                            NaN   \n",
       "3                                      NaN                            NaN   \n",
       "4                                      NaN                            NaN   \n",
       "\n",
       "          y  \n",
       "0  0.052590  \n",
       "1  0.059868  \n",
       "2  0.050449  \n",
       "3  0.049394  \n",
       "4  0.154247  \n",
       "\n",
       "[5 rows x 80 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number categorical featues: 1\n",
      "galactic year                                                                  int64\n",
      "galaxy                                                                        object\n",
      "existence expectancy index                                                   float64\n",
      "existence expectancy at birth                                                float64\n",
      "Gross income per capita                                                      float64\n",
      "                                                                              ...   \n",
      "Intergalactic Development Index (IDI), male, Rank                            float64\n",
      "Adjusted net savings                                                         float64\n",
      "Creature Immunodeficiency Disease prevalence, adult (% ages 15-49), total    float64\n",
      "Private galaxy capital flows (% of GGP)                                      float64\n",
      "Gender Inequality Index (GII)                                                float64\n",
      "Length: 79, dtype: object\n"
     ]
    }
   ],
   "source": [
    "types = x_train.dtypes\n",
    "print(\"Number categorical featues:\", sum(types=='object'))\n",
    "print(types)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>galactic year</th>\n",
       "      <th>existence expectancy index</th>\n",
       "      <th>existence expectancy at birth</th>\n",
       "      <th>Gross income per capita</th>\n",
       "      <th>Income Index</th>\n",
       "      <th>Expected years of education (galactic years)</th>\n",
       "      <th>Mean years of education (galactic years)</th>\n",
       "      <th>Intergalactic Development Index (IDI)</th>\n",
       "      <th>Education Index</th>\n",
       "      <th>Intergalactic Development Index (IDI), Rank</th>\n",
       "      <th>...</th>\n",
       "      <th>Current health expenditure (% of GGP)</th>\n",
       "      <th>Intergalactic Development Index (IDI), female</th>\n",
       "      <th>Intergalactic Development Index (IDI), male</th>\n",
       "      <th>Gender Development Index (GDI)</th>\n",
       "      <th>Intergalactic Development Index (IDI), female, Rank</th>\n",
       "      <th>Intergalactic Development Index (IDI), male, Rank</th>\n",
       "      <th>Adjusted net savings</th>\n",
       "      <th>Creature Immunodeficiency Disease prevalence, adult (% ages 15-49), total</th>\n",
       "      <th>Private galaxy capital flows (% of GGP)</th>\n",
       "      <th>Gender Inequality Index (GII)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3.865000e+03</td>\n",
       "      <td>3864.000000</td>\n",
       "      <td>3864.000000</td>\n",
       "      <td>3837.000000</td>\n",
       "      <td>3837.000000</td>\n",
       "      <td>3732.000000</td>\n",
       "      <td>3502.000000</td>\n",
       "      <td>3474.000000</td>\n",
       "      <td>3474.000000</td>\n",
       "      <td>3432.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>867.000000</td>\n",
       "      <td>916.000000</td>\n",
       "      <td>915.000000</td>\n",
       "      <td>914.000000</td>\n",
       "      <td>893.000000</td>\n",
       "      <td>892.000000</td>\n",
       "      <td>912.000000</td>\n",
       "      <td>941.000000</td>\n",
       "      <td>874.000000</td>\n",
       "      <td>844.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.000709e+06</td>\n",
       "      <td>0.872479</td>\n",
       "      <td>76.798111</td>\n",
       "      <td>31633.240872</td>\n",
       "      <td>0.825154</td>\n",
       "      <td>14.723296</td>\n",
       "      <td>10.283959</td>\n",
       "      <td>0.804246</td>\n",
       "      <td>0.745900</td>\n",
       "      <td>135.129178</td>\n",
       "      <td>...</td>\n",
       "      <td>8.837096</td>\n",
       "      <td>0.823561</td>\n",
       "      <td>0.844209</td>\n",
       "      <td>1.008465</td>\n",
       "      <td>121.754797</td>\n",
       "      <td>120.873428</td>\n",
       "      <td>21.252922</td>\n",
       "      <td>6.443023</td>\n",
       "      <td>22.261474</td>\n",
       "      <td>0.600733</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>6.945463e+03</td>\n",
       "      <td>0.162367</td>\n",
       "      <td>10.461654</td>\n",
       "      <td>18736.378445</td>\n",
       "      <td>0.194055</td>\n",
       "      <td>3.612546</td>\n",
       "      <td>3.319948</td>\n",
       "      <td>0.176242</td>\n",
       "      <td>0.199795</td>\n",
       "      <td>52.449535</td>\n",
       "      <td>...</td>\n",
       "      <td>2.806800</td>\n",
       "      <td>0.185780</td>\n",
       "      <td>0.159041</td>\n",
       "      <td>0.087299</td>\n",
       "      <td>46.269362</td>\n",
       "      <td>46.795666</td>\n",
       "      <td>14.258986</td>\n",
       "      <td>4.804873</td>\n",
       "      <td>34.342797</td>\n",
       "      <td>0.205785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>9.900250e+05</td>\n",
       "      <td>0.227890</td>\n",
       "      <td>34.244062</td>\n",
       "      <td>-126.906522</td>\n",
       "      <td>0.292001</td>\n",
       "      <td>3.799663</td>\n",
       "      <td>1.928166</td>\n",
       "      <td>0.273684</td>\n",
       "      <td>0.189874</td>\n",
       "      <td>9.925906</td>\n",
       "      <td>...</td>\n",
       "      <td>2.313778</td>\n",
       "      <td>0.305733</td>\n",
       "      <td>0.369519</td>\n",
       "      <td>0.465177</td>\n",
       "      <td>23.224603</td>\n",
       "      <td>16.215151</td>\n",
       "      <td>-76.741414</td>\n",
       "      <td>-1.192011</td>\n",
       "      <td>-735.186886</td>\n",
       "      <td>0.089092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>9.950060e+05</td>\n",
       "      <td>0.763027</td>\n",
       "      <td>69.961449</td>\n",
       "      <td>20169.118912</td>\n",
       "      <td>0.677131</td>\n",
       "      <td>12.592467</td>\n",
       "      <td>7.654169</td>\n",
       "      <td>0.671862</td>\n",
       "      <td>0.597746</td>\n",
       "      <td>92.262724</td>\n",
       "      <td>...</td>\n",
       "      <td>6.843091</td>\n",
       "      <td>0.690707</td>\n",
       "      <td>0.731264</td>\n",
       "      <td>0.965800</td>\n",
       "      <td>84.090816</td>\n",
       "      <td>82.232550</td>\n",
       "      <td>15.001028</td>\n",
       "      <td>4.113472</td>\n",
       "      <td>17.227899</td>\n",
       "      <td>0.430332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000e+06</td>\n",
       "      <td>0.907359</td>\n",
       "      <td>78.995101</td>\n",
       "      <td>26600.768195</td>\n",
       "      <td>0.827300</td>\n",
       "      <td>14.942913</td>\n",
       "      <td>10.385465</td>\n",
       "      <td>0.824758</td>\n",
       "      <td>0.761255</td>\n",
       "      <td>135.914318</td>\n",
       "      <td>...</td>\n",
       "      <td>8.518629</td>\n",
       "      <td>0.835410</td>\n",
       "      <td>0.862773</td>\n",
       "      <td>1.029947</td>\n",
       "      <td>120.069916</td>\n",
       "      <td>121.057923</td>\n",
       "      <td>22.182571</td>\n",
       "      <td>5.309497</td>\n",
       "      <td>24.472557</td>\n",
       "      <td>0.624640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.006009e+06</td>\n",
       "      <td>0.992760</td>\n",
       "      <td>84.558971</td>\n",
       "      <td>36898.631754</td>\n",
       "      <td>0.970295</td>\n",
       "      <td>17.123797</td>\n",
       "      <td>12.884752</td>\n",
       "      <td>0.939043</td>\n",
       "      <td>0.893505</td>\n",
       "      <td>175.301993</td>\n",
       "      <td>...</td>\n",
       "      <td>10.573365</td>\n",
       "      <td>0.970365</td>\n",
       "      <td>0.961369</td>\n",
       "      <td>1.068481</td>\n",
       "      <td>158.579644</td>\n",
       "      <td>157.815625</td>\n",
       "      <td>29.134738</td>\n",
       "      <td>6.814577</td>\n",
       "      <td>31.748295</td>\n",
       "      <td>0.767404</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.015056e+06</td>\n",
       "      <td>1.246908</td>\n",
       "      <td>100.210053</td>\n",
       "      <td>151072.683156</td>\n",
       "      <td>1.361883</td>\n",
       "      <td>26.955944</td>\n",
       "      <td>19.057648</td>\n",
       "      <td>1.232814</td>\n",
       "      <td>1.269625</td>\n",
       "      <td>278.786613</td>\n",
       "      <td>...</td>\n",
       "      <td>23.531546</td>\n",
       "      <td>1.237661</td>\n",
       "      <td>1.182746</td>\n",
       "      <td>1.181230</td>\n",
       "      <td>232.720847</td>\n",
       "      <td>233.915373</td>\n",
       "      <td>61.903641</td>\n",
       "      <td>36.538462</td>\n",
       "      <td>95.941245</td>\n",
       "      <td>1.098439</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 78 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       galactic year  existence expectancy index  \\\n",
       "count   3.865000e+03                 3864.000000   \n",
       "mean    1.000709e+06                    0.872479   \n",
       "std     6.945463e+03                    0.162367   \n",
       "min     9.900250e+05                    0.227890   \n",
       "25%     9.950060e+05                    0.763027   \n",
       "50%     1.000000e+06                    0.907359   \n",
       "75%     1.006009e+06                    0.992760   \n",
       "max     1.015056e+06                    1.246908   \n",
       "\n",
       "       existence expectancy at birth  Gross income per capita  Income Index  \\\n",
       "count                    3864.000000              3837.000000   3837.000000   \n",
       "mean                       76.798111             31633.240872      0.825154   \n",
       "std                        10.461654             18736.378445      0.194055   \n",
       "min                        34.244062              -126.906522      0.292001   \n",
       "25%                        69.961449             20169.118912      0.677131   \n",
       "50%                        78.995101             26600.768195      0.827300   \n",
       "75%                        84.558971             36898.631754      0.970295   \n",
       "max                       100.210053            151072.683156      1.361883   \n",
       "\n",
       "       Expected years of education (galactic years)  \\\n",
       "count                                   3732.000000   \n",
       "mean                                      14.723296   \n",
       "std                                        3.612546   \n",
       "min                                        3.799663   \n",
       "25%                                       12.592467   \n",
       "50%                                       14.942913   \n",
       "75%                                       17.123797   \n",
       "max                                       26.955944   \n",
       "\n",
       "       Mean years of education (galactic years)  \\\n",
       "count                               3502.000000   \n",
       "mean                                  10.283959   \n",
       "std                                    3.319948   \n",
       "min                                    1.928166   \n",
       "25%                                    7.654169   \n",
       "50%                                   10.385465   \n",
       "75%                                   12.884752   \n",
       "max                                   19.057648   \n",
       "\n",
       "       Intergalactic Development Index (IDI)  Education Index  \\\n",
       "count                            3474.000000      3474.000000   \n",
       "mean                                0.804246         0.745900   \n",
       "std                                 0.176242         0.199795   \n",
       "min                                 0.273684         0.189874   \n",
       "25%                                 0.671862         0.597746   \n",
       "50%                                 0.824758         0.761255   \n",
       "75%                                 0.939043         0.893505   \n",
       "max                                 1.232814         1.269625   \n",
       "\n",
       "       Intergalactic Development Index (IDI), Rank  ...  \\\n",
       "count                                  3432.000000  ...   \n",
       "mean                                    135.129178  ...   \n",
       "std                                      52.449535  ...   \n",
       "min                                       9.925906  ...   \n",
       "25%                                      92.262724  ...   \n",
       "50%                                     135.914318  ...   \n",
       "75%                                     175.301993  ...   \n",
       "max                                     278.786613  ...   \n",
       "\n",
       "       Current health expenditure (% of GGP)  \\\n",
       "count                             867.000000   \n",
       "mean                                8.837096   \n",
       "std                                 2.806800   \n",
       "min                                 2.313778   \n",
       "25%                                 6.843091   \n",
       "50%                                 8.518629   \n",
       "75%                                10.573365   \n",
       "max                                23.531546   \n",
       "\n",
       "       Intergalactic Development Index (IDI), female  \\\n",
       "count                                     916.000000   \n",
       "mean                                        0.823561   \n",
       "std                                         0.185780   \n",
       "min                                         0.305733   \n",
       "25%                                         0.690707   \n",
       "50%                                         0.835410   \n",
       "75%                                         0.970365   \n",
       "max                                         1.237661   \n",
       "\n",
       "       Intergalactic Development Index (IDI), male  \\\n",
       "count                                   915.000000   \n",
       "mean                                      0.844209   \n",
       "std                                       0.159041   \n",
       "min                                       0.369519   \n",
       "25%                                       0.731264   \n",
       "50%                                       0.862773   \n",
       "75%                                       0.961369   \n",
       "max                                       1.182746   \n",
       "\n",
       "       Gender Development Index (GDI)  \\\n",
       "count                      914.000000   \n",
       "mean                         1.008465   \n",
       "std                          0.087299   \n",
       "min                          0.465177   \n",
       "25%                          0.965800   \n",
       "50%                          1.029947   \n",
       "75%                          1.068481   \n",
       "max                          1.181230   \n",
       "\n",
       "       Intergalactic Development Index (IDI), female, Rank  \\\n",
       "count                                         893.000000     \n",
       "mean                                          121.754797     \n",
       "std                                            46.269362     \n",
       "min                                            23.224603     \n",
       "25%                                            84.090816     \n",
       "50%                                           120.069916     \n",
       "75%                                           158.579644     \n",
       "max                                           232.720847     \n",
       "\n",
       "       Intergalactic Development Index (IDI), male, Rank  \\\n",
       "count                                         892.000000   \n",
       "mean                                          120.873428   \n",
       "std                                            46.795666   \n",
       "min                                            16.215151   \n",
       "25%                                            82.232550   \n",
       "50%                                           121.057923   \n",
       "75%                                           157.815625   \n",
       "max                                           233.915373   \n",
       "\n",
       "       Adjusted net savings   \\\n",
       "count             912.000000   \n",
       "mean               21.252922   \n",
       "std                14.258986   \n",
       "min               -76.741414   \n",
       "25%                15.001028   \n",
       "50%                22.182571   \n",
       "75%                29.134738   \n",
       "max                61.903641   \n",
       "\n",
       "       Creature Immunodeficiency Disease prevalence, adult (% ages 15-49), total  \\\n",
       "count                                         941.000000                           \n",
       "mean                                            6.443023                           \n",
       "std                                             4.804873                           \n",
       "min                                            -1.192011                           \n",
       "25%                                             4.113472                           \n",
       "50%                                             5.309497                           \n",
       "75%                                             6.814577                           \n",
       "max                                            36.538462                           \n",
       "\n",
       "       Private galaxy capital flows (% of GGP)  Gender Inequality Index (GII)  \n",
       "count                               874.000000                     844.000000  \n",
       "mean                                 22.261474                       0.600733  \n",
       "std                                  34.342797                       0.205785  \n",
       "min                                -735.186886                       0.089092  \n",
       "25%                                  17.227899                       0.430332  \n",
       "50%                                  24.472557                       0.624640  \n",
       "75%                                  31.748295                       0.767404  \n",
       "max                                  95.941245                       1.098439  \n",
       "\n",
       "[8 rows x 78 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### One-hot-encoding of categorical feature\n",
    "1. Why to encode the categorical feature? *Answer*: because machine learning algorithms are used to work with numbers, not with words.\n",
    "2. Why one-hot-encoding form? why not give each category in the feature a specific code value? *Answer*: because giving a specific code value implies some ordering. For example, if we have feature color, we do not want that some color has higher priority than another.\n",
    "3. How many new features will be added? What if we have some missing values, which is the case in this dataset? *Answer*: number of features added will equal to the set of features in specific category minus one, because we can encode one feature through others. If there will be some missing values, we can just encode them as a sequence of zeros.\n",
    "4. When is it appropriate to give each category an encoding value? *Answer*: if we have some order in category. For example: small, medium, large. Then it makes sense to use 1, 2, 3 values.\n",
    "\n",
    "##### In the next cell, implement the function that take a dataframe, name of the categorical feature, and the encoder object. Then, adds new features that represent the one-hot-encoding form of this feature and ignore the missing values in it (encode them to zeros).\n",
    "##### Then encode the same column/feature in the testset with the same encoder object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "encoder = OneHotEncoder(handle_unknown=\"ignore\", sparse=False)\n",
    "\n",
    "categorical_feature = ['galaxy']\n",
    "encoder.fit(x_train[categorical_feature])\n",
    "\n",
    "def ohe_new_features(df, feature_name, encoder):\n",
    "    # Write your code here (4:6 lines) ###\n",
    "    # create new features from the encoder transform function\n",
    "    # concat it to the original dataframe\n",
    "    # delete the categorical feature.\n",
    "    new_feats = encoder.transform(df[feature_name])\n",
    "    new_cols = pd.DataFrame(new_feats, dtype=int)\n",
    "    new_df = pd.concat([df, new_cols], axis=1)\n",
    "    new_df.drop(feature_name, axis=1, inplace=True)\n",
    "    return new_df\n",
    "\n",
    "# Write your code here (2 lines)\n",
    "# Transform both train and testset.\n",
    "x_train = ohe_new_features(x_train, categorical_feature, encoder)\n",
    "x_test_private = ohe_new_features(x_test_private, categorical_feature, encoder)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Imputation\n",
    "#### Imputation is filling the missing values in the dataset.\n",
    "Several issues to address:\n",
    "1. Why we should fill them? Why not remove the rows that has missing values? *Answer*: because we have some information in those rows or columns. If we will delete this information, we just lose information for training our model.\n",
    "2. Filling it with constant value for each value, but what's it? *Answer*: mean or mode.\n",
    "3. (Advanced) Estimate the filling value, each row for its own. *Answer*: to run some machine learning algorithm where model is our feature and estimate values only for this feature. So, for ech feature we will have a new model.\n",
    "4. How to choose the imputation strategy? *Answer*: using a validation set or using cross-validation.\n",
    "4. (Not related only to imputations) Why we fit the imputer to the training data not the concatenation of both train and test set? *Answer*: because any manypulations that were done with train dataset should not affect on test dataset.\n",
    "\n",
    "##### In the next cell, implement a function that returns the count of nan/empty cells in a dataframe.\n",
    "##### Use SimpleImputer object, fit it to the trainset, then transform both the train and test sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of missing cells in train: 185698\n",
      "Number of missing cells in test: 19834\n",
      "Number of missing cells in train after imputation: 0\n",
      "Number of missing cells in test after imputation: 0\n"
     ]
    }
   ],
   "source": [
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "# Complete a function that returns number of empty cells in\n",
    "def count_nans(df):\n",
    "    # 1 or 2 lines.\n",
    "    return pd.isna(df).sum().sum()\n",
    "\n",
    "\n",
    "# Print number of empty cells both in x_train and x_test_private (1 line)\n",
    "print(f\"Number of missing cells in train: {count_nans(x_train)}\")\n",
    "print(f\"Number of missing cells in test: {count_nans(x_test_private)}\")\n",
    "# Write your code here (4 lines):\n",
    "# create the imputer object.\n",
    "# fit it to the trainset.\n",
    "# transform the train and test set.\n",
    "imputer = SimpleImputer(strategy='mean')\n",
    "imputer.fit(x_train)\n",
    "x_train_imputed = imputer.transform(x_train)\n",
    "x_test_p_imputed = imputer.transform(x_test_private)\n",
    "\n",
    "# Print number of empty cells both in x_train and x_test_private (1 line)\n",
    "print(f\"Number of missing cells in train after imputation: {count_nans(x_train_imputed)}\")\n",
    "print(f\"Number of missing cells in test after imputation: {count_nans(x_test_p_imputed)}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Features Scaling\n",
    "1. Why we need to make all the features have same range of values?\\\n",
    "*Answer* : If we have one feature like length with range 10000 and another feature like tempreture with range 25 and calculate the distance value between two points of the dataset we will get a huge difference.\\\n",
    "2. What are the different strategies to scale the features?\\\n",
    "*Answer* : \n",
    "* Min-Max Scaling: transform all features to fall in range [0,1].\\\n",
    "$x_i=\\frac{x_i - min(x)}{max(x)-min(x)}$\n",
    "* Standard Scaling: transform all features to have mean=0 and standard deviation=1. By assumption that all features follow normal distribution, we can scale them that our features  ~ N(0,1).\\\n",
    "$x_i=\\frac{x_i - mean(x)}{stdev(x)}$\n",
    "* Robust Scaling: robust to the outliers that can affect on mean, median, stdev, min, max. It uses interquartile range to scale features according to it. Interquartile is the range between 1st and 3rd quartiles.\\\n",
    "$x_i=\\frac{x_i - Q_1(x)}{Q_3(x)-Q_1(x)}$\n",
    "3. How to choose the strategy?\n",
    "*Answer*: using a validation set or using cross-validation.\n",
    "\n",
    "##### In the following cell, scale all the features with a scaler from your choice. Fit the scaler on the training set and transform both train and test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "# Write your code here (5 lines):\n",
    "# choose the scaler class.\n",
    "# create the scaler object.\n",
    "# fit it to the trainset.\n",
    "# transform the train and test set.\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler\n",
    "\n",
    "scaler = RobustScaler()\n",
    "x_train_imputed = scaler.fit_transform(x_train_imputed)\n",
    "x_test_p_imputed = scaler.fit(x_test_p_imputed)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Trainset splitting\n",
    "Issues that lead to trainset splitting:\n",
    "1. How we will measure the performance of our model? *Answer*: we should split our dataset into tree datasets: train, test and validation. So, we will train our model on train dataset and measure it perfomance on test set. The reason to split them is to prevent overfitting of the model.\n",
    "2. How we will tune the hyperparamters? Can it be done with testset? *Answer*: using a validation dataset.\n",
    "\n",
    "Issues to think of:\n",
    "1. Is is the best strategy to get the best estimate for the true risk/performance of the system?\n",
    "2. How to choose between two models?\n",
    "\n",
    "\n",
    "##### In the next task, you will split your data into 3 parts, train, test, and validation by ratios: 70%, 20%, and 10% respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2705, 259) (773, 259) (387, 259)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "# Write your code here (2 lines)\n",
    "x_train, x_test, y_train, y_test = train_test_split(x_train_imputed, y_train, test_size=0.2)\n",
    "x_train, x_validation, y_train, y_validation = train_test_split(x_train, y_train, test_size=1/8)\n",
    "\n",
    "print(x_train.shape, x_test.shape, x_validation.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Plotting\n",
    "Visualization is key-issue to get some insights and intuition about your dataset.\n",
    "How to plot 79 features (79-dimensional data)? what we can plot -at maximum- is 2d or 3d data.\n",
    "\n",
    "Hint: We should reduce the dimension. Read this [article](https://towardsdatascience.com/dimensionality-reduction-ways-and-intuitions-1b5e97592d8e).\n",
    "\n",
    "So, Let's use MDS to reduce the dimension of this dataset to be 2D. (refer to the above article on how to use and the intuition behind it)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA, FactorAnalysis, FastICA\n",
    "from sklearn.manifold import MDS, TSNE\n",
    "from umap import UMAP\n",
    "\n",
    "dim_reducer = UMAP(n_components=2)\n",
    "x_train_reduced = dim_reducer.fit_transform(x_train_imputed)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's plot the reduced dataset on a 2D plane.\n",
    "Use matplotlib to make a scatter plot for the reduced dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "# Write code to plot the reduced dataset in a scatter plot.\n",
    "plt.scatter(x_train_reduced[:, 0], x_train_reduced[:, 1], marker='.')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
